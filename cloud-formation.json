{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Spark on Kudu TCP-H query performance test",

  "Parameters" : {

    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "BrokerCapacity": {
      "Default": "2",
      "Description" : "The initial number of worker instances",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "128",
      "ConstraintDescription" : "must be between 1 and 128 EC2 instances."
    },

    "DataVolumeSize": {
      "Default": "50",
      "Description" : "The size of the instance data volume in gigs",
      "Type": "Number",
      "MinValue": "50",
      "ConstraintDescription" : "Must be > 50G"
    },

    "WorkerMem": {
      "Default": "1G",
      "Description" : "Amount of memory to give Spark workers",
      "Type": "String"
    },

    "ExecMem": {
      "Default": "1G",
      "Description" : "Amount of memory to give Spark executors",
      "Type": "String"
    },

    "InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "m1.small",
      "AllowedValues" : [ "t1.micro", "t2.micro", "t2.small", "t2.medium", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "SSHLocation" : {
      "Description" : " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },

  "Conditions" : {
    "Is-EC2-VPC"     : { "Fn::Or" : [ {"Fn::Equals" : [{"Ref" : "AWS::Region"}, "eu-central-1" ]},
      {"Fn::Equals" : [{"Ref" : "AWS::Region"}, "cn-north-1" ]}]},
    "Is-EC2-Classic" : { "Fn::Not" : [{ "Condition" : "Is-EC2-VPC"}]}
  },

  "Resources" : {

    "TestRunner": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "InstallAndRun" : [ "Install", "Configure" ],
            "PreInstall" : ["CloudWatch"]
          },

          "CloudWatch" : {
            "files" : {
              "/tmp/cwlogs/output.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[general]\n",
                      "state_file= /var/awslogs/agent-state\n",
                      "[/root/log.out]\n",
                      "file = /root/log.out\n",
                      "log_group_name = ", {"Ref": "KudoPocLogGroup"}, "\n",
                      "log_stream_name = {instance_id}/testrunnerlog.out\n",
                      "datetime_format = %d/%b/%Y:%H:%M:%S\n",
                      "[/boot.out]\n",
                      "file = /root/log.out\n",
                      "log_group_name = ", {"Ref": "KudoPocLogGroup"}, "\n",
                      "log_stream_name = {instance_id}/testrunnerboot.out\n",
                      "datetime_format = %d/%b/%Y:%H:%M:%S"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              }
            }
          },

          "Install" : {
            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },

              "/root/start-runner.sh" : {
                "content": { "Fn::Join" : ["", [
                  "#!/bin/bash\n",
                  "set -x\n",
                  "exec 3>&1 4>&2\n",
                  "trap 'exec 2>&4 1>&3' 0 1 2 3\n",
                  "exec 1>log.out 2>&1\n",
                  "export PATH=/opt/sbt/bin/:/opt/jdk1.8.0_91/bin/:/opt/apache-maven-3.3.9/bin/:$PATH\n",

                  "cd /mnt/data/\n",
                  "git clone https://github.com/AgilData/tpch-spark.git\n",
                  "cd /mnt/data/tpch-spark/dbgen/\n",
                  "make clean\n",
                  "make\n",

                  "cd /mnt/data/tpch-spark/spark-kudu\n",
                  "sudo mkdir -p /root/.m2\n",
                  "sudo ln -s /mnt/data/maven_repository /root/.m2/repository\n",
                  "sudo ln -s /mnt/data/ivy2 /root/.ivy2\n",
                  "sbt package\n",

                  "echo Started Runner!\n",
                  "echo Signal the status from cfn-init\n",
                  "/usr/local/bin/cfn-signal -e $? ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource TestRunner ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",

                  "cd /mnt/data/tpch-spark/dbgen/\n",
                  "./dbgen -qf -s 1\n",

                  "echo ZOOKEEPER_ADDRESS=$ZOOKEEPER_ADDRESS\n",
                  "cd /mnt/data/tpch-spark/spark-kudu\n",
                  "sbt \"run --kuduMaster $ZOOKEEPER_ADDRESS:7051 --sparkMaster local[*] --inputDir /mnt/data/tpch-spark/dbgen/ --executorMemory ", { "Ref" : "ExecMem" }, " --mode populate\"\n",

                  "nohup python -m SimpleHTTPServer 80 &\n",
                  "sbt \"run --kuduMaster $ZOOKEEPER_ADDRESS:7051 --sparkMaster spark://$ZOOKEEPER_ADDRESS:7077 -f src/main/resources/example_queries.csv --executorMemory 5g --mode csv\" > log.txt\n"

                ]]}
              },

              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource TestRunner ",
                  "         --configsets InstallAndRun ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              }
            }
          },

          "Configure" : {
            "commands" : {
              "test" : {
                "command" : "sh /root/start-runner.sh",
                "env" : {
                  "ZOOKEEPER_ADDRESS": {"Fn::GetAtt" : ["MasterInstance", "PublicIp"]}
                },
                "cwd" : "~"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : "ami-e0de258d",
        "AvailabilityZone" : "us-east-1b",
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "TestRunnerSecurityGroup"} ],
        "IamInstanceProfile": { "Ref": "LogRoleInstanceProfile" },
        "KeyName"        : { "Ref" : "KeyName" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ " ", [ "TestRunner", { "Ref" : "AWS::StackName" } ] ] }},
          {"Key" : "Billing Breakout", "Value" : "kudu_poc"}
        ],
        "BlockDeviceMappings": [{
          "DeviceName": "/dev/sdb",
          "Ebs" : {"VolumeSize": { "Ref" : "DataVolumeSize" }}
        }],
        "UserData": {
          "Fn::Base64": { "Fn::Join":["", [
            "#!/bin/bash -ex\n",
            "set -x\n",
            "exec 3>&1 4>&2\n",
            "trap 'exec 2>&4 1>&3' 0 1 2 3\n",
            "exec 1>boot.out 2>&1\n",

            "xfs_growfs /mnt/data\n",

            "apt-get update\n",
            "apt-get -y install python-setuptools\n",
            "mkdir aws-cfn-bootstrap-latest\n",
            "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
            "easy_install aws-cfn-bootstrap-latest\n",

            "/usr/local/bin/cfn-init -s ", { "Ref": "AWS::StackId" }, " -r TestRunner ", " --configsets PreInstall ", " --region ", { "Ref": "AWS::Region" }, "\n",

            "wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py\n",

            "python awslogs-agent-setup.py -n -r ", { "Ref" : "AWS::Region" }, " -c /tmp/cwlogs/output.conf || error_exit 'Failed to run CloudWatch Logs agent setup'\n",

            "\n",
            "echo Install the files and packages from the metadata\n",
            "/usr/local/bin/cfn-init -v ",
            "         --stack ", { "Ref" : "AWS::StackName" },
            "         --resource TestRunner ",
            "         --configsets InstallAndRun ",
            "         --region ", { "Ref" : "AWS::Region" }, "\n"
          ]]}
        }
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      },
      "DependsOn": "TServerGroup"
    },

    "TServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : ["us-east-1b"],
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "128",
        "DesiredCapacity" : { "Ref" : "BrokerCapacity" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ " ", [ "TServer", { "Ref" : "AWS::StackName" } ] ] }, "PropagateAtLaunch" : "true"},
          {"Key" : "Billing Breakout", "Value" : "kudu_poc", "PropagateAtLaunch" : "true"}
        ]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT60M",
          "Count"   : { "Ref" : "BrokerCapacity" }
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime" : "PT60M",
          "WaitOnResourceSignals": "true"
        }
      },
      "DependsOn": "MasterInstance"
    },

    "LaunchConfig": {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "Comment1" : "Configure the bootstrap helpers to install the Apache Web Server and PHP",
        "Comment2" : "The website content is downloaded from the CloudFormationPHPSample.zip file",

        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "InstallAndRun" : [ "Install", "Configure" ],
            "PreInstall" : ["CloudWatch"]
          },

          "CloudWatch" : {
            "files" : {
              "/tmp/cwlogs/output.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[general]\n",
                      "state_file= /var/awslogs/agent-state\n",
                      "[/root/log.out]\n",
                      "file = /root/log.out\n",
                      "log_group_name = ", {"Ref": "KudoPocLogGroup"}, "\n",
                      "log_stream_name = {instance_id}/tserverlog.out\n",
                      "datetime_format = %d/%b/%Y:%H:%M:%S\n",
                      "[/boot.out]\n",
                      "file = /root/log.out\n",
                      "log_group_name = ", {"Ref": "KudoPocLogGroup"}, "\n",
                      "log_stream_name = {instance_id}/tserverboot.out\n",
                      "datetime_format = %d/%b/%Y:%H:%M:%S"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              }
            }
          },

          "Install" : {

            "files" : {

              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },

              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource LaunchConfig ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              },

              "/root/start-worker.sh" : {
                "content": { "Fn::Join" : ["", [
                  "#!/bin/bash\n",
                  "\n",

                  "# Log output\n",
                  "set -x\n",
                  "exec 3>&1 4>&2\n",
                  "trap 'exec 2>&4 1>&3' 0 1 2 3\n",
                  "exec 1>log.out 2>&1\n",
                  "\n",

                  "export PATH=/opt/jdk1.8.0_91/bin/:/opt/apache-maven-3.3.9/bin/:$PATH\n",
                  "mkdir -p /mnt/data/kudu_data\n",
                  "chmod ugo+rw /mnt/data/kudu_data\n",
                  "ln -s /mnt/data/kudu_data /var/lib/kudu\n",

                  "cd /mnt/data/spark\n",
                  "./sbin/start-slave.sh --memory ", { "Ref" : "WorkerMem" }," spark://${ZOOKEEPER_ADDRESS}:7077 &\n",
                  "cd /mnt/data/kudu/build/release\n",
                  "nohup bin/kudu-tserver -fs_wal_dir=/var/lib/kudu/tserver -tserver_master_addrs ${ZOOKEEPER_ADDRESS} -logtostderr -use_hybrid_clock=false -fs_wal_dir=/var/lib/kudu/tserver &\n",

                  "echo Started Worker!\n",
                  "echo Signal the status from cfn-init\n",
                  "/usr/local/bin/cfn-signal -e $? ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource TServerGroup ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n"

                ]]}
              }
            }
          },
          "Configure" : {
            "commands" : {
              "agildata-install" : {
                "command" : "sh /root/start-worker.sh",
                "env" : {
                  "ZOOKEEPER_ADDRESS": {"Fn::GetAtt" : ["MasterInstance", "PublicIp"]}
                },
                "cwd" : "~"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : "ami-e0de258d",
        "InstanceType" : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "TServerSecurityGroup"} ],
        "IamInstanceProfile": { "Ref": "LogRoleInstanceProfile" },
        "KeyName" : { "Ref" : "KeyName" },
        "BlockDeviceMappings": [{
          "DeviceName": "/dev/sdb",
          "Ebs" : {"VolumeSize": { "Ref" : "DataVolumeSize" }}
        }],
        "UserData": {
          "Fn::Base64": { "Fn::Join":["", [
            "#!/bin/bash -ex\n",
            "set -x\n",
            "exec 3>&1 4>&2\n",
            "trap 'exec 2>&4 1>&3' 0 1 2 3\n",
            "exec 1>boot.out 2>&1\n",

            "xfs_growfs /mnt/data\n",

            "apt-get update\n",
            "apt-get -y install python-setuptools\n",
            "mkdir aws-cfn-bootstrap-latest\n",
            "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
            "easy_install aws-cfn-bootstrap-latest\n",

            "/usr/local/bin/cfn-init -s ", { "Ref": "AWS::StackId" }, " -r LaunchConfig ", " --configsets PreInstall ", " --region ", { "Ref": "AWS::Region" }, "\n",

            "wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py\n",

            "python awslogs-agent-setup.py -n -r ", { "Ref" : "AWS::Region" }, " -c /tmp/cwlogs/output.conf || error_exit 'Failed to run CloudWatch Logs agent setup'\n",


            "/usr/local/bin/cfn-init -v --stack ", { "Ref":"AWS::StackName" }, " --resource LaunchConfig", " --configsets InstallAndRun ", " --region ", { "Ref": "AWS::Region" }, "\n"
          ]]}
        }
      }
    },

    "TServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access via port 80, SSH access, remote debugging, and JMX",
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "0",
            "ToPort" : "65535",
            "CidrIp" : { "Ref" : "SSHLocation"}
          }
        ]
      }
    },

    "TestRunnerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable access via port 2181 and SSH access",
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "0",
            "ToPort" : "65535",
            "CidrIp" : { "Ref" : "SSHLocation"}
          }
        ]
      }
    },

    "KuduSparkMasterSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable access via port 2181 and SSH access",
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "0",
            "ToPort" : "65535",
            "CidrIp" : { "Ref" : "SSHLocation"}
          }
        ]
      }
    },

    "MasterInstance": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "InstallAndRun" : [ "Install", "Configure" ],
            "PreInstall" : ["CloudWatch"]
          },

          "CloudWatch" : {
            "files" : {
              "/tmp/cwlogs/output.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[general]\n",
                      "state_file= /var/awslogs/agent-state\n",
                      "[/root/log.out]\n",
                      "file = /root/log.out\n",
                      "log_group_name = ", {"Ref": "KudoPocLogGroup"}, "\n",
                      "log_stream_name = {instance_id}/masterlog.out\n",
                      "datetime_format = %d/%b/%Y:%H:%M:%S\n",
                      "[/boot.out]\n",
                      "file = /root/log.out\n",
                      "log_group_name = ", {"Ref": "KudoPocLogGroup"}, "\n",
                      "log_stream_name = {instance_id}/masterboot.out\n",
                      "datetime_format = %d/%b/%Y:%H:%M:%S"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              }
            }
          },

          "Install" : {
            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },

              "/root/start-master.sh" : {
                "content": { "Fn::Join" : ["", [
                  "#!/bin/bash\n",
                  "set -x\n",
                  "exec 3>&1 4>&2\n",
                  "trap 'exec 2>&4 1>&3' 0 1 2 3\n",
                  "exec 1>log.out 2>&1\n",

                  "export PATH=/opt/jdk1.8.0_91/bin/:/opt/apache-maven-3.3.9/bin/:$PATH\n",
                  "mkdir -p /mnt/data/kudu_data\n",
                  "chmod ugo+rw /mnt/data/kudu_data\n",
                  "ln -s /mnt/data/kudu_data /var/lib/kudu\n",

                  "cd /mnt/data/spark\n",
                  "./sbin/start-master.sh\n",
                  "cd /mnt/data/kudu/build/release\n",
                	"nohup bin/kudu-master -fs_wal_dir=/var/lib/kudu/master -logtostderr -use_hybrid_clock=false --webserver_doc_root=/mnt/data/kudu &\n",

                  "echo Started Master!\n",
                  "echo Signal the status from cfn-init\n",
                  "/usr/local/bin/cfn-signal -e $? ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource MasterInstance ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]}
              },

              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource MasterInstance ",
                  "         --configsets InstallAndRun ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              }
            }
          },

          "Configure" : {
            "commands" : {
              "test" : {
                "command" : "sh /root/start-master.sh",
                "cwd" : "~"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : "ami-e0de258d",
        "AvailabilityZone" : "us-east-1b",
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "KuduSparkMasterSecurityGroup"} ],
        "IamInstanceProfile": { "Ref": "LogRoleInstanceProfile" },
        "KeyName"        : { "Ref" : "KeyName" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ " ", [ "Master", { "Ref" : "AWS::StackName" } ] ] }},
          {"Key" : "Billing Breakout", "Value" : "kudu_poc"}
        ],
        "BlockDeviceMappings": [{
          "DeviceName": "/dev/sdb",
          "Ebs" : {"VolumeSize": { "Ref" : "DataVolumeSize" }}
        }],
        "UserData": {
          "Fn::Base64": { "Fn::Join":["", [
            "#!/bin/bash -ex\n",
            "set -x\n",
            "exec 3>&1 4>&2\n",
            "trap 'exec 2>&4 1>&3' 0 1 2 3\n",
            "exec 1>boot.out 2>&1\n",

            "xfs_growfs /mnt/data\n",

            "apt-get update\n",
            "apt-get -y install python-setuptools\n",
            "mkdir aws-cfn-bootstrap-latest\n",
            "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
            "easy_install aws-cfn-bootstrap-latest\n",
            "\n",
            "echo Install the files and packages from the metadata\n",

            "/usr/local/bin/cfn-init -s ", { "Ref": "AWS::StackId" }, " -r MasterInstance ", " --configsets PreInstall ", " --region ", { "Ref": "AWS::Region" }, "\n",

            "wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py\n",

            "python awslogs-agent-setup.py -n -r ", { "Ref" : "AWS::Region" }, " -c /tmp/cwlogs/output.conf || error_exit 'Failed to run CloudWatch Logs agent setup'\n",


            "/usr/local/bin/cfn-init -v ",
            "         --stack ", { "Ref" : "AWS::StackName" },
            "         --resource MasterInstance ",
            "         --configsets InstallAndRun ",
            "         --region ", { "Ref" : "AWS::Region" }, "\n"
          ]]}
        }
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      }
    },

    "LogRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "LogRolePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:Create*",
                    "logs:PutLogEvents",
                    "s3:GetObject"
                  ],
                  "Resource": [
                    "arn:aws:logs:*:*:*",
                    "arn:aws:s3:::*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "KudoPocLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 3
      }
    },
    "LogRoleInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "LogRole"
          }
        ]
      }
    }
  },


  "Outputs" : {
    "MasterIP" : {
      "Description" : "IP of master",
      "Value" : { "Fn::GetAtt" : [ "MasterInstance", "PublicIp" ]}
    },
    "TestRunnerIp" : {
      "Description" : "IP of Spark Driver",
      "Value" : { "Fn::GetAtt" : [ "TestRunner", "PublicIp" ]}
    }
  }
}
